# Text data analysis 1

# 텍스트 데이터 분석 개요

**Text data 수집 →**

**(Web scraping)**

1. **Tokenize        →**
2. **POS Tagging**
3. **Stopwords 제거**

**단어 개수 카운팅 → & 단어 사전 생성**

**단어 사전 기반  →  데이터 시각화**

**머신러닝/딥러닝  모델 적용**

### **nltk** library(Natural Language Toolkit)를 이용하여 Text Processing을 위한 실습

```python
import nltk

# nltk.download()  # 텍스트 데이터 처리를 위한 패키지 다운로드

# Download following packages
# Corpora : stopwords, wordnet
# Models : averaged_perceptron_tagger, maxnet_treebank_pos_tagger, punkt
```

### 1. Tokenize

- 텍스트 데이터를 형태소 단위로 나누는 작업

```python
# 전처리하고자 하는 문장을 String 변수로 저장
sentence = 'NLTK is a leading platform for building Python programs to work with human language data. It provides easy-to-use interfaces to over 50 corpora and lexical resources such as WordNet, along with a suite of text processing libraries for classification, tokenization, stemming, tagging, parsing, and semantic reasoning, wrappers for industrial-strength NLP libraries, and an active discussion forum.'

# 각 문장을 토큰화한 결과를 출력
tokens = nltk.word_tokenize(sentence)  # 문장을 '단어 수준에서' 토큰화하여 출력
tokens
```

```
['NLTK',
 'is',
 'a',
 'leading',
 'platform',
 'for',
 'building',
 'Python',
 'programs',
 'to',
 'work',
 'with',
 'human',
 'language', ...
```

### 2. POS(Part-of-speech) Tagging

- 형태소 단위로 나눠놓은 단어들에 대해 어떤 품사를 가지고 있는지 표기하는 작업

```python
nltk.pos_tag(tokens)  # 토큰화한 문장을 대상으로 품사를 태깅("POS" Tagging)하여 출력한다
```

```
[('NLTK', 'NNP'),
 ('is', 'VBZ'),
 ('a', 'DT'),
 ('leading', 'VBG'),
 ('platform', 'NN'),
 ('for', 'IN'),
 ('building', 'VBG'),
 ('Python', 'NNP'),
 ('programs', 'NNS'),
 ('to', 'TO'),
 ('work', 'VB'),
 ('with', 'IN'),
 ('human', 'JJ'),
 ('language', 'NN'), ...
```

품사는 다음을 참고 [https://pythonprogramming.net/part-of-speech-tagging-nltk-tutorial/](https://pythonprogramming.net/part-of-speech-tagging-nltk-tutorial/)

### 3. Stopwords 제거

- 분석에 크게 의미없는 단어들(ex. a, an, the)에 대해 삭제하는 작업

```python
# nltk 모듈에서 Stopwords 호출
from nltk.corpus import stopwords

# 영어의 stopwords를 불러와 변수에 저장한다 (stopwords에 속하는 "단어" 리스트)
stopWords = stopwords.words('english') # 지원 언어 목록 : stopwords.fileids()

# stop words 출력
print(stopWords)
```

`['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll"..]`

stopwords는 모두 소문자인 것을 유의!

```python
# stopwords에 쉼표(,)와 마침표(.) 추가하여 다시 적용

stop_words = stopwords.words("english") # stop_words == list
stop_words.append(',')
stop_words.append('.')

result = []  # stopwords가 제거된 결과를 담기 위한 리스트 생성

for token in tokens:
    if token.lower() not in stop_words:  # 만약 소문자로 변환한 token이 stopWords 내에 없으면:
        result.append(token)  # token을 리스트에 첨부

print(result)
```

`['NLTK', 'leading', 'platform', 'building', 'Python', 'programs', 'work', 'human', 'language', 'data', 'provides', 'easy-to-use', 'interfaces', '50', 'corpora', 'lexical', ...]`

### 4. Lemmatizing

단어의 형태소적 분석을 통해 어근에 기반하여 기본 사전형인 lemma를 찾는 작업

(ex. 복수형 → 단수형)

```python
# WordNetLemmatizer 객체 생성
lemmatizer = nltk.wordnet.WordNetLemmatizer()

# WordNetLemmatize는 더 정확한 분석을 위해 PoS 정보를 추가로 입력받을 수 있음 (n : 명사 v : 동사 a : 형용사 r : 부사)
# default == n(명사) 이므로 'cats'은 기본명사형인 'cat'로 결과가 출력됨
# 'ran'은 동사를 나타내는 PoS 정보인 'v'를 함께 입력해주어야 제대로 결과를 확인할 수 있음
# 'better'도 마찬가지로, '형용사(a)'라는 정보를 함께 입력해주어야 원형인 'good'을 제대로 출력해줌

print(lemmatizer.lemmatize("cats")) # lemmatize한 결과를 출력한다
print(lemmatizer.lemmatize("better", pos="a"))
print(lemmatizer.lemmatize("ran", 'v'))
```

```
cat
good
run
```

### 5. 한 번에 적용

```python
# Stopwords
stop_words = stopwords.words("english")
stop_words.append(',')
stop_words.append('.')

file = open('moviereview.txt', 'r', encoding='utf-8')
lines = file.readlines()  # readlines 함수로 텍스트 파일의 내용을 읽어 리스트로 저장

sentence = lines[1] 
tokens = nltk.word_tokenize(sentence)  
tagged_tokens = nltk.pos_tag(tokens)

# for문을 통해 stopwords 제거와 lemmatization을 수행한다
lemmas = []  # lemmatize한 결과를 담기 위한 리스트를 생성한다
for token, pos in tagged_tokens:  
    if token.lower() not in stop_words:  # 소문자로 변환한 token이 stopwords에 없으면:
        
        if pos.startswith('N'):
            lemmas.append(lemmatizer.lemmatize(token, pos = 'n'))
        elif pos.startswith('J'):
            lemmas.append(lemmatizer.lemmatize(token, pos = 'a'))
        elif pos.startswith('V'):
            lemmas.append(lemmatizer.lemmatize(token, pos = 'v'))
        else:
            lemmas.append(lemmatizer.lemmatize(token))  # lemmatize한 결과를 리스트에 첨부

print('Lemmas of : ' + sentence)  # lemmatize한 결과를 출력
print(lemmas)
```

```
Lemmas of : Despite being a huge comic book nerd I was not familiar with the Guardians before the first movie came out. I did some googling and upon learning about this sci-fi superhero team consisting of a talking raccoon and tree man I was hardly impressed.I finally got round to watching the first film and was blown away. It had a remarkable charm that even the other Marvel titles didn't have. It was filled with great humour, memorable moments and fit into the Marvel Universe long running story perfectly.Because of this I pumped by expectations up high for the sequel to a degree where it was almost guaranteed to fail yet somehow, someway it didn't.Not only did it meet my expectations but it exceeded them, GotG2 is amazing.Full of the same five star humour, being a visual treat and once again with an excellent soundtrack the film gripped me from the outset and delivered that charm all over again.This time including several industry veterans including Kurt Russell (Who has been on great form since his return) and Sylvester Stallone they fit in well and don't detract from the franchise as I feared they might.With cameo appearances along the way from the likes of Farscape (1999) lead Ben Browder to industry legend Seth Green as Howard the Duck this is a fun rollercoaster ride than left me positively gagging for more.This is one of those films I feel like I could rant about (In a positive way) for a while and so I'm going to resist the urge and merely say that Guardians 2 is a contender for the best Marvel movie, contested only by the first Avengers film.Masterpiece.The Good:Cast are great againCharm returnsExcellent nostalgic soundtrackLooks amazingThe Bad:Only one movie with Baby Groot? Noooo!They seem to have dropped Drax's taking everything literal jokes awayMichael Rosenbaum was wastedThings I Learnt From This Movie:Batista should have skipped over wrestling and just been an actor

['Despite', 'huge', 'comic', 'book', 'nerd', 'familiar', 'Guardians', 'first', 'movie', 'come', 'googling', 'upon', 'learn', 'sci-fi', 'superhero', 'team', 'consisting', 'talk', 'raccoon', 'tree', 'man', 'hardly', 'impressed.I', 'finally', 'get', 'round', 'watch', 'first', 'film', 'blow', 'away', 'remarkable', 'charm', 'even', 'Marvel', 'title', "n't", 'fill', 'great', 'humour', 'memorable', 'moment', 'fit', 'Marvel', 'Universe', 'long', 'run', 'story', 'perfectly.Because', 'pump', 'expectation', 'high', 'sequel', 'degree', 'almost', 'guarantee', 'fail', 'yet', 'somehow', 'someway', "didn't.Not", 'meet', 'expectation', 'exceed', 'GotG2', 'amazing.Full', 'five', 'star', 'humour', 'visual', 'treat', 'excellent', 'soundtrack', 'film', 'grip', 'outset', 'deliver', 'charm', 'again.This', 'time', 'include', 'several', 'industry', 'veteran', 'include', 'Kurt', 'Russell', '(', 'great', 'form', 'since', 'return', ')', 'Sylvester', 'Stallone', 'fit', 'well', "n't", 'detract', 'franchise', 'fear', 'might.With', 'cameo', 'appearance', 'along', 'way', 'like', 'Farscape', '(', '1999', ')', 'lead', 'Ben', 'Browder', 'industry', 'legend', 'Seth', 'Green', 'Howard', 'Duck', 'fun', 'rollercoaster', 'ride', 'leave', 'positively', 'gag', 'more.This', 'one', 'film', 'feel', 'like', 'could', 'rant', '(', 'positive', 'way', ')', "'m", 'go', 'resist', 'urge', 'merely', 'say', 'Guardians', '2', 'contender', 'best', 'Marvel', 'movie', 'contest', 'first', 'Avengers', 'film.Masterpiece.The', 'Good', ':', 'Cast', 'great', 'againCharm', 'returnsExcellent', 'nostalgic', 'soundtrackLooks', 'amazingThe', 'Bad', ':', 'one', 'movie', 'Baby', 'Groot', '?', 'Noooo', '!', 'seem', 'drop', 'Drax', "'s", 'take', 'everything', 'literal', 'joke', 'awayMichael', 'Rosenbaum', 'wastedThings', 'Learnt', 'Movie', ':', 'Batista', 'skip', 'wrestling', 'actor']
```